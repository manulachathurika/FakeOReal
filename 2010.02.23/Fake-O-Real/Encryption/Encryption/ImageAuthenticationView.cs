//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using FakeOReal.Infrastructure.Interface;
using System.Drawing;
using System.Security.Cryptography;

namespace FakeOReal.Encryption
{
    public partial class ImageAuthenticationView : UserControl, IImageAuthenticationView
    {
        OpenFileDialog open = new OpenFileDialog();
        OpenFileDialog open1 = new OpenFileDialog();

        public ImageAuthenticationView()
        {
            InitializeComponent();
        }

        public enum CompareResult
        {
            ciCompareOk,
            ciPixelMismatch,
            ciSizeMismatch
        };

        protected override void OnLoad(EventArgs e)
        {
           // _presenter.OnViewReady();
            base.OnLoad(e);
        }

        public static CompareResult Compare(Bitmap bmp1, Bitmap bmp2)
        {

            CompareResult cr = CompareResult.ciCompareOk;


            //Test to see if we have the same size of image
            if (bmp1.Size != bmp2.Size)
            {
                cr = CompareResult.ciSizeMismatch;
               MessageBox.Show("Image has to resize");
            }
            else
            {
                //Convert each image to a byte array
                System.Drawing.ImageConverter ic = new System.Drawing.ImageConverter();
                byte[] btImage1 = new byte[1];
                btImage1 = (byte[])ic.ConvertTo(bmp1, btImage1.GetType());
                byte[] btImage2 = new byte[1];
                btImage2 = (byte[])ic.ConvertTo(bmp2, btImage2.GetType());

                //Compute a hash for each image
                SHA256Managed shaM = new SHA256Managed();
                byte[] hash1 = shaM.ComputeHash(btImage1);
                byte[] hash2 = shaM.ComputeHash(btImage2);

                //Compare the hash values
                for (int i = 0; i < hash1.Length && i < hash2.Length && cr == CompareResult.ciCompareOk; i++)
                {
                    if (hash1[i] != hash2[i])
                    {
                        cr = CompareResult.ciPixelMismatch;
                        MessageBox.Show("Image Edited");
                        break;
                    }
                    else
                    {
                        MessageBox.Show("Image Not Edited");
                    }
                    break;
                }
            }
            return cr;
        }

        public ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
        {
            // Implement ISmartPartInfoProvider in the containing smart part. Required in order for contained smart part infos to work.
            return this.infoProvider.GetSmartPartInfo(smartPartInfoType);

        }

        
        private void button1_Click_2(object sender, EventArgs e)
        {
            open.Filter = "Image Files(*.jpg; *.jpeg; *.gif; *.bmp)|*.jpg; *.jpeg; *.gif; *.bmp";
            if (open.ShowDialog() == DialogResult.OK)
            {
                pictureBox1.Image = new Bitmap(open.FileName);
            }
        }

        private void button2_Click_1(object sender, EventArgs e)
        {
            open1.Filter = "Image Files(*.jpg; *.jpeg; *.gif; *.bmp)|*.jpg; *.jpeg; *.gif; *.bmp";
            if (open1.ShowDialog() == DialogResult.OK)
            {
                pictureBox2.Image = new Bitmap(open1.FileName);
            }
        }

        private void button3_Click_1(object sender, EventArgs e)
        {
            Compare(new Bitmap(open.FileName), new Bitmap(open1.FileName));
        }
    }
}
