//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-08-060-Add_Business_Module_Next_Steps.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using FakeOReal.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using System.Drawing;
using Microsoft.Practices.CompositeUI.EventBroker;
using FakeOReal.Encryption.Constants;
using Microsoft.Practices.CompositeUI.SmartParts;

namespace FakeOReal.Encryption
{
    public class ModuleController : WorkItemController
    {
        private Image image;
        private string path;
        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection or see ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm
            UIExtensionSite MainMenuSite =
         this.WorkItem.UIExtensionSites[UIExtensionSiteNames.MainMenu];
            ToolStripMenuItem TopTi = new ToolStripMenuItem("Encryption");
            ToolStripMenuItem ti1 = new ToolStripMenuItem("Add Visible Text Watermark");
            ToolStripMenuItem ti2 = new ToolStripMenuItem("Add Visible Image Watermark");
            ToolStripMenuItem ti3 = new ToolStripMenuItem("Image Authentication");
            ToolStripMenuItem ti4 = new ToolStripMenuItem("Image Steganography");
           
            TopTi.DropDownItems.Add(ti1);
            TopTi.DropDownItems.Add(ti2);
            TopTi.DropDownItems.Add(ti3);
            TopTi.DropDownItems.Add(ti4);

            MainMenuSite.Add(TopTi);

            this.WorkItem.Commands[CommandNames.visibleTextWatermark].
        AddInvoker(ti1, "Click");           
            this.WorkItem.Commands[CommandNames.visibleImageWatermark].
        AddInvoker(ti2, "Click");
            this.WorkItem.Commands[CommandNames.imageAuthentication].
        AddInvoker(ti3, "Click");
            this.WorkItem.Commands[CommandNames.imageSteganography].
        AddInvoker(ti4, "Click");
        }

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm
            UIExtensionSite MainToolbarSite =
             this.WorkItem.UIExtensionSites[UIExtensionSiteNames.MainToolbar];

            ToolStripButton ts = new ToolStripButton();
            Image im = Image.FromFile("authenticate.png");
            ts.Image = im;
            MainToolbarSite.Add(ts);

            ToolStripButton ts1 = new ToolStripButton();
            Image im1 = Image.FromFile("stegano.gif");
            ts1.Image = im1;
            MainToolbarSite.Add(ts1);

            ToolStripButton ts2 = new ToolStripButton();
            Image im2 = Image.FromFile("water.jpg");
            ts2.Image = im2;
            MainToolbarSite.Add(ts2);

            ToolStripButton ts3 = new ToolStripButton();
            Image im3 = Image.FromFile("watermark_home.jpg");
            ts3.Image = im3;
            MainToolbarSite.Add(ts3);


            ToolStripSeparator sp = new ToolStripSeparator();
            MainToolbarSite.Add(sp);

            ts.ToolTipText = "Image Authentication";
            ts1.ToolTipText = "Image Steganography";
            ts2.ToolTipText = "Visible Text Watermark";
            ts3.ToolTipText = "Visible Image Watermark";

            this.WorkItem.Commands[CommandNames.imageAuthentication].
        AddInvoker(ts, "Click");
            this.WorkItem.Commands[CommandNames.imageSteganography].
        AddInvoker(ts1, "Click");
            this.WorkItem.Commands[CommandNames.visibleTextWatermark].
        AddInvoker(ts2, "Click");
            this.WorkItem.Commands[CommandNames.visibleImageWatermark].
        AddInvoker(ts3, "Click");
        
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm

            // To create and add a view you can customize the following sentence
            // SampleView view = ShowViewInWorkspace<SampleView>(WorkspaceNames.SampleWorkspace);

        }

        [CommandHandler(CommandNames.visibleTextWatermark)]
        public void VtextwatermarkClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
                VisibleWatermark vw = new VisibleWatermark(path);
                vw.Show();
            }
        }

        [CommandHandler(CommandNames.visibleImageWatermark)]
        public void VimagewatermarkClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
                VisibleWatermarking vw = new VisibleWatermarking(path);
                vw.Show();
            }
        }

        [CommandHandler(CommandNames.imageAuthentication)]
        public void AuthenticateImage(object sender, EventArgs e)
        {
            if (image != null)
            {
                ImageAuthenticationView mov = this.WorkItem.SmartParts.AddNew<ImageAuthenticationView>();
                SmartPartInfo spi =
                     new SmartPartInfo("Authentication", "MyOwnDescription");
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
            }
        }

        [CommandHandler(CommandNames.imageSteganography)]
        public void Steganography(object sender, EventArgs e)
        {
            frmMain fm = new frmMain();
            fm.Show();
        }

        [EventSubscription(EventTopicNames.LoadImage, ThreadOption.UserInterface)]
        public void OnLoadImage(object sender, OnImageLoad eventArgs)
        {//TODO: Add your code here
            image = eventArgs.img;
            path = eventArgs.file;
        }        
    }
}
