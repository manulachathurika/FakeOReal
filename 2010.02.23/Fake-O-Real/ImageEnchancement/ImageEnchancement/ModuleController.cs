//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-08-060-Add_Business_Module_Next_Steps.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using FakeOReal.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Microsoft.Practices.CompositeUI.SmartParts;
using FakeOReal.ImageEnchancement.Interface.Constants;
using System.Drawing;
using Microsoft.Practices.CompositeUI.EventBroker;
using Emgu.CV.UI;
using Emgu.Util;
using Emgu.CV;
using AForge.Imaging.Filters;

namespace FakeOReal.ImageEnchancement
{
    public class ModuleController : WorkItemController
    {
        private static Image image;
        private static string path;     
        private static GetParam pa;
        private static GetParam2 pa2;
        private static GetParam3 pa3;
        private static ImageEView mov;

        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection or see ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm
            UIExtensionSite MainMenuSite =
            this.WorkItem.UIExtensionSites[UIExtensionSiteNames.MainMenu];
            ToolStripMenuItem TopTi = new ToolStripMenuItem("Enchancement");
            ToolStripMenuItem ti1 = new ToolStripMenuItem("Image Smoothing");
            ToolStripMenuItem ti2 = new ToolStripMenuItem("Adjustments");          
            ToolStripMenuItem ti3 = new ToolStripMenuItem("Invert");
            ToolStripMenuItem ti4 = new ToolStripMenuItem("Sharpen");            

            ToolStripMenuItem ti1_1 = new ToolStripMenuItem("Gaussian Smooth");
            ToolStripMenuItem ti1_2 = new ToolStripMenuItem("Median Smooth");
            ToolStripMenuItem ti1_3 = new ToolStripMenuItem("Adaptive Smooth");
            ToolStripMenuItem ti1_4 = new ToolStripMenuItem("Blur Smooth");
            ToolStripMenuItem ti1_5 = new ToolStripMenuItem("Conservative Smooth");

            ToolStripMenuItem ti2_1 = new ToolStripMenuItem("Brightness");
            ToolStripMenuItem ti2_2 = new ToolStripMenuItem("Contrast");
            ToolStripMenuItem ti2_3 = new ToolStripMenuItem("Gamma");            

            ti1.DropDownItems.Add(ti1_1);
            ti1.DropDownItems.Add(ti1_2);
            ti1.DropDownItems.Add(ti1_3);
            ti1.DropDownItems.Add(ti1_4);
            ti1.DropDownItems.Add(ti1_5);

            ti2.DropDownItems.Add(ti2_1);
            ti2.DropDownItems.Add(ti2_2);
            ti2.DropDownItems.Add(ti2_3);
           
            TopTi.DropDownItems.Add(ti1);
            TopTi.DropDownItems.Add(ti2);
            TopTi.DropDownItems.Add(ti3);
            TopTi.DropDownItems.Add(ti4);           

            MainMenuSite.Add(TopTi);
            this.WorkItem.Commands[CommandNames.smooth_gaussian].
        AddInvoker(ti1_1, "Click");
            this.WorkItem.Commands[CommandNames.smooth_median].
        AddInvoker(ti1_2, "Click");
            this.WorkItem.Commands[CommandNames.smooth_adaptive].
      AddInvoker(ti1_3, "Click");
            this.WorkItem.Commands[CommandNames.smooth_blur].
        AddInvoker(ti1_4, "Click");
            this.WorkItem.Commands[CommandNames.smooth_conservative].
        AddInvoker(ti1_5, "Click");
            this.WorkItem.Commands[CommandNames.brightness].
       AddInvoker(ti2_1, "Click");
            this.WorkItem.Commands[CommandNames.contrast].
       AddInvoker(ti2_2, "Click");
            this.WorkItem.Commands[CommandNames.gamma_correction].
       AddInvoker(ti2_3, "Click");           
            this.WorkItem.Commands[CommandNames.invert].
       AddInvoker(ti3, "Click");
            this.WorkItem.Commands[CommandNames.sharpen].
       AddInvoker(ti4, "Click");           
        }

        private void ExtendToolStrip()
        {
            UIExtensionSite MainToolbarSite =
        this.WorkItem.UIExtensionSites[UIExtensionSiteNames.MainToolbar];

            ToolStripButton ts = new ToolStripButton();
            Image im = Image.FromFile("sharp.jpg");
            ts.Image = im;
            MainToolbarSite.Add(ts);

            ToolStripButton ts1 = new ToolStripButton();
            Image im1 = Image.FromFile("inverted.jpg");
            ts1.Image = im1;
            MainToolbarSite.Add(ts1);

            ToolStripSeparator sp = new ToolStripSeparator();
            MainToolbarSite.Add(sp);

            ts.ToolTipText = "Sharpen Image";
            ts1.ToolTipText = "Invert Image";

            this.WorkItem.Commands[CommandNames.sharpen].
        AddInvoker(ts, "Click");
            this.WorkItem.Commands[CommandNames.invert].
        AddInvoker(ts1, "Click");
        }

        private void AddViews()
        {
           
        }
       
        [CommandHandler(CommandNames.smooth_gaussian)]
        public void GaussianClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {                    
                pa3 = new GetParam3(this);             
                pa3.trackBar1.Minimum = 5;
                pa3.trackBar1.Maximum = 50;
                pa3.trackBar1.TickFrequency = 3;
                pa3.trackBar2.Minimum = 1;
                pa3.trackBar2.Maximum = 10;
                pa3.trackBar2.TickFrequency = 1;             
                pa3.Show();                      
            }
        }        

        [CommandHandler(CommandNames.smooth_median)]
        public void MedianClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {             
                Bitmap img = new Bitmap(path);
                Median filter = new Median();
                img = filter.Apply(img);
                //ImageEView
                if (mov != null)
                {
                    this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
                }
                    mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
                mov.panAndZoomPictureBox1.Image = img;
                SmartPartInfo spi =
                         new SmartPartInfo("Median", "MyOwnDescription");
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
            }
        }

        [CommandHandler(CommandNames.smooth_adaptive)]
        public void AdaptiveClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
                Bitmap img = new Bitmap(path);                
                AdaptiveSmoothing filter = new AdaptiveSmoothing();
                img = filter.Apply(img);
               // ImageEView 
                if (mov != null)
                {
                    this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
                }
                    mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
                mov.panAndZoomPictureBox1.Image = img;
                SmartPartInfo spi =
                         new SmartPartInfo("Adaptive", "MyOwnDescription");
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);    
            }
        }

        [CommandHandler(CommandNames.smooth_blur)]
        public void BlurClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
                Bitmap img = new Bitmap(path);
                Blur filter = new Blur();
                img = filter.Apply(img);
                //ImageEView 
                if (mov != null)
                {
                    this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
                }
                    mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
                mov.panAndZoomPictureBox1.Image = img;
                SmartPartInfo spi =
                         new SmartPartInfo("Blur", "MyOwnDescription");
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);       
            }
        }

        [CommandHandler(CommandNames.smooth_conservative)]
        public void ConservativeClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
               // pa = this.WorkItem.SmartParts.AddNew<ParamView>();
                pa2 = new GetParam2(this);
                pa2.filter_name.Text = "Conservative Filter";               
                pa2.trackBar1.Minimum = 1;
                pa2.trackBar1.Maximum = 12;
                pa2.trackBar1.TickFrequency = 1;               
                pa2.param1.Text = "Kernel Size";                
               // this.WorkItem.Workspaces[WorkspaceNames.RightWorkspace].Show(pa);
                pa2.Show();
            }
        }

        [CommandHandler(CommandNames.contrast)]
        public void ContrastClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
                pa2 = new GetParam2(this);
                pa2.filter_name.Text = "Contrast Correction";
                pa2.trackBar1.Minimum = 1;
                pa2.trackBar1.Maximum = 5000;
                pa2.trackBar1.TickFrequency = 200;
                pa2.trackBar1.SmallChange = 1;
                pa2.param1.Text = "Contrast";
                pa2.Show();
            }
        }

        [CommandHandler(CommandNames.brightness)]
        public void brightnessClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
              //  pa = this.WorkItem.SmartParts.AddNew<ParamView>();
                pa2 = new GetParam2(this);
                pa2.filter_name.Text = "Brightness Correction";
                pa2.trackBar1.Minimum = -1000;
                pa2.trackBar1.Maximum = 1000;
                pa2.trackBar1.TickFrequency = 50;
                pa2.trackBar1.SmallChange = 1;       
                pa2.param1.Text = "Brightness";
               // this.WorkItem.Workspaces[WorkspaceNames.RightWorkspace].Show(pa);     
                pa2.Show();
            }
        }

        [CommandHandler(CommandNames.gamma_correction)]
        public void GammaClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
               // pa = this.WorkItem.SmartParts.AddNew<ParamView>();
                pa2 = new GetParam2(this);
                pa2.filter_name.Text = "Gamma Correction";
                pa2.trackBar1.Minimum = 1;
                pa2.trackBar1.Maximum = 50;                
                pa2.trackBar1.TickFrequency = 5;
                pa2.param1.Text = "Gamma";
                pa2.Show();
               // this.WorkItem.Workspaces[WorkspaceNames.RightWorkspace].Show(pa);               
            }
        }

        [CommandHandler(CommandNames.invert)]
        public void invertClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {                
                Bitmap img = new Bitmap(path);
                Invert filter = new Invert();
                img = filter.Apply(img);
               // ImageEView 
                if (mov != null)
                {
                    this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
                }
                    mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
                mov.panAndZoomPictureBox1.Image = img;
                SmartPartInfo spi =
                         new SmartPartInfo("Invert", "MyOwnDescription");
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
            }
        }

        [CommandHandler(CommandNames.sharpen)]
        public void sharpenClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
                Bitmap img = new Bitmap(path);
                Sharpen filter = new Sharpen();
                img = filter.Apply(img);
                //ImageEView 
                if (mov != null)
                {
                    this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
                }
                    mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
                mov.panAndZoomPictureBox1.Image = img;
                SmartPartInfo spi =
                         new SmartPartInfo("Sharpen", "MyOwnDescription");
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
            }
        }        

        [EventSubscription(EventTopicNames.LoadImage, ThreadOption.UserInterface)]
        public void OnLoadImage(object sender, OnImageLoad eventArgs)
        {//TODO: Add your code here
            image = eventArgs.img;
            path = eventArgs.file;
        }
        
        public void doGaussian(int sigma,int kernel) {
            Bitmap imx = new Bitmap(path);            
                GaussianBlur gb = new GaussianBlur((sigma / 10), (kernel * 2 + 1));
                imx = gb.Apply(imx);
               // ImageEView
                if (mov != null)
                {
                    this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
                }
                    mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
                mov.panAndZoomPictureBox1.Image = imx;
                SmartPartInfo spi =
                     new SmartPartInfo("Gaussian", "MyOwnDescription");
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);         
             
        }

        public void doConservative(int kernel)
        {
            Bitmap img = new Bitmap(path);
            ConservativeSmoothing filter = new ConservativeSmoothing(kernel * 2 + 1);
            // apply the filter               
            img = filter.Apply(img);
           // ImageEView 
            if (mov != null)
            {
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
            }
                mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
            mov.panAndZoomPictureBox1.Image = img;
            SmartPartInfo spi =
                     new SmartPartInfo("Conservative", "MyOwnDescription");
            this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
        }

        public void doGamma(int gamma)
        {
            Bitmap img = new Bitmap(path);
            GammaCorrection filter = new GammaCorrection((gamma / 10));
            // apply the filter               
            img = filter.Apply(img);
           // ImageEView 
            if (mov != null)
            {
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
            }
                mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
            mov.panAndZoomPictureBox1.Image = img;
            SmartPartInfo spi =
                     new SmartPartInfo("Gamma Correction", "MyOwnDescription");
            this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
        }

        public void doContrast(int contrast)
        {
            Bitmap img = new Bitmap(path);
            ContrastCorrection filter = new ContrastCorrection(((double)contrast/1000));
            // apply the filter               
            img = filter.Apply(img);
            //ImageEView 
            if (mov != null)
            {
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
            }
                mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
            mov.panAndZoomPictureBox1.Image = img;
            SmartPartInfo spi =
                     new SmartPartInfo("Contrast", "MyOwnDescription");
            this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
        }


        public void doBrightness(int bright)
        {
            Bitmap img = new Bitmap(path);         
            BrightnessCorrection filter = new BrightnessCorrection((double)bright / 1000);
            img = filter.Apply(img);
           // ImageEView
            if (mov != null)
            {
                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Close(mov);
            }
                mov = this.WorkItem.SmartParts.AddNew<ImageEView>();
            mov.panAndZoomPictureBox1.Image = img;
            SmartPartInfo spi =
                     new SmartPartInfo("Brightness Correction", "MyOwnDescription");
            this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
            
        }
    }
}