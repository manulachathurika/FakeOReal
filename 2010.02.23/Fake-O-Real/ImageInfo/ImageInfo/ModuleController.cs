//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-08-060-Add_Business_Module_Next_Steps.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using FakeOReal.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Microsoft.Practices.CompositeUI.SmartParts;
using System.Drawing;
using Microsoft.Practices.CompositeUI.EventBroker;
using FakeOReal.ImageInfo.Constants;


namespace FakeOReal.ImageInfo
{
    public class ModuleController : WorkItemController
    {
        private ExifTagCollection _exif;
        private Image image;
        private string path;
        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection or see ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm
            UIExtensionSite MainMenuSite =
        this.WorkItem.UIExtensionSites[UIExtensionSiteNames.MainMenu];
            ToolStripMenuItem TopTi = new ToolStripMenuItem("Image Info");
            ToolStripMenuItem ti1 = new ToolStripMenuItem("View ExifData");
            //  ToolStripMenuItem ti2 = new ToolStripMenuItem("Histogram");         

            TopTi.DropDownItems.Add(ti1);
            //  TopTi.DropDownItems.Add(ti2);

            MainMenuSite.Add(TopTi);
            this.WorkItem.Commands[CommandNames.view_exif].AddInvoker(ti1, "Click");
            //   this.WorkItem.Commands[CommandNames.histogram].AddInvoker(ti2, "Click");            
        }

        private void ExtendToolStrip()
        {
            UIExtensionSite MainToolbarSite =
        this.WorkItem.UIExtensionSites[UIExtensionSiteNames.MainToolbar];
            ToolStripButton ts = new ToolStripButton();
            ToolStripSeparator sp = new ToolStripSeparator();
            Image im = Image.FromFile("data.jpg");
            ts.Image = im;
            MainToolbarSite.Add(ts);
            MainToolbarSite.Add(sp);

            ts.ToolTipText = "View Exif Data";

            this.WorkItem.Commands[CommandNames.view_exif].
        AddInvoker(ts, "Click");

        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm

            // To create and add a view you can customize the following sentence
            // SampleView view = ShowViewInWorkspace<SampleView>(WorkspaceNames.SampleWorkspace);

        }

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-350-Registering_Commands.htm
        //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm
        [CommandHandler(CommandNames.view_exif)]
        public void ViewExifClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {
                ImageInfos newIInfo = new ImageInfos(image);
                ImageInfoView mov = this.WorkItem.SmartParts.AddNew<ImageInfoView>();
                SmartPartInfo spi =
                     new SmartPartInfo("Exif-Info", "MyOwnDescription");

                _exif = new ExifTagCollection(path);
                foreach (ExifTag tag in _exif)
                    AddTagToList(tag, mov);

                this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
            }
        }
        /*
        [CommandHandler(CommandNames.histogram)]
        public void HistogramClickHandler(object sender, EventArgs e)
        {
            ImageInfoView mov = this.WorkItem.SmartParts.AddNew<ImageInfoView>();
            SmartPartInfo spi =
                 new SmartPartInfo("Histogram", "MyOwnDescription");
            this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
        }*/

        private void AddTagToList(ExifTag tag, ImageInfoView mov)
        {
            ListViewItem item = mov.listExif.Items.Add(tag.Id.ToString());
            item.SubItems.Add(tag.FieldName);
            item.SubItems.Add(tag.Description);
            item.SubItems.Add(tag.Value);
        }

        [EventSubscription(EventTopicNames.LoadImage, ThreadOption.UserInterface)]
        public void OnLoadImage(object sender, OnImageLoad eventArgs)
        {//TODO: Add your code here
            image = eventArgs.img;
            path = eventArgs.file;
        }
    }
}
