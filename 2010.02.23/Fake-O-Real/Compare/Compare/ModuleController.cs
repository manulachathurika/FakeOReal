//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-08-060-Add_Business_Module_Next_Steps.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using FakeOReal.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.CompositeUI.Commands;
using System.Drawing;
using Microsoft.Practices.CompositeUI.EventBroker;
using FakeOReal.Compare.Constants;
using AForge.Imaging;
using AForge.Imaging.Textures;
using AForge.Imaging.Filters;
using AForge.Controls;
using AForge;
using System.Collections.Generic;
using System.Drawing.Imaging;




namespace FakeOReal.Compare
{
    public class ModuleController : WorkItemController
    {
        private static System.Drawing.Image image;
        private static string path;
        private static CompView pa;
        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection or see ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm
            UIExtensionSite MainMenuSite =
            this.WorkItem.UIExtensionSites[UIExtensionSiteNames.MainMenu];
            ToolStripMenuItem TopTi = new ToolStripMenuItem("Image Comparison");
            ToolStripMenuItem ti1 = new ToolStripMenuItem("Exhaustive Block Matching");
           
            TopTi.DropDownItems.Add(ti1);
          
            MainMenuSite.Add(TopTi);
            this.WorkItem.Commands[CommandNames.exhaustiveblock].
        AddInvoker(ti1, "Click");           
        }

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm
            UIExtensionSite MainToolbarSite =
            this.WorkItem.UIExtensionSites[UIExtensionSiteNames.MainToolbar];

            ToolStripButton ts = new ToolStripButton();
            System.Drawing.Image im = System.Drawing.Image.FromFile("exhaustive.png");
            ts.Image = im;
            MainToolbarSite.Add(ts);

            ToolStripSeparator sp = new ToolStripSeparator();
            MainToolbarSite.Add(sp);

            ts.ToolTipText = "Exhaustive Block Matching";

            this.WorkItem.Commands[CommandNames.exhaustiveblock].
        AddInvoker(ts, "Click");
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm

            // To create and add a view you can customize the following sentence
            // SampleView view = ShowViewInWorkspace<SampleView>(WorkspaceNames.SampleWorkspace);

        }

        [EventSubscription(EventTopicNames.LoadImage, ThreadOption.UserInterface)]
        public void OnLoadImage(object sender, OnImageLoad eventArgs)
        {//TODO: Add your code here
            image = eventArgs.img;
            path = eventArgs.file;
        }

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-350-Registering_Commands.htm
        //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm
        [CommandHandler(CommandNames.exhaustiveblock)]
        public void exBlockClickHandler(object sender, EventArgs e)
        {
            if (image != null)
            {               
                OpenFileDialog ofd = new OpenFileDialog();                
                ofd.Multiselect = false;
                ofd.Title = "Choose an Image to Comparewith";
                DialogResult result = ofd.ShowDialog();
                if (result == DialogResult.OK)
                {
                    string filename = ofd.FileName;
                    try
                    {
                        Bitmap searchImage = new Bitmap(filename);
                        Bitmap sourceImage = new Bitmap(path);
                        CompView mov = this.WorkItem.SmartParts.AddNew<CompView>();
                        mov.panAndZoomPictureBox1.Image = searchImage;
                        SmartPartInfo spi =
                                 new SmartPartInfo("Search Image", "MyOwnDescription");
                        this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov, spi);
                        // collect reference points using corners detector (for example)
                        SusanCornersDetector scd = new SusanCornersDetector(30, 18);                        
                        List<IntPoint> points = scd.ProcessImage(sourceImage);                       
                        // create block matching algorithm's instance
                        ExhaustiveBlockMatching bm = new ExhaustiveBlockMatching();                        
                        // process images searching for block matchings
                        List<BlockMatch> matches = bm.ProcessImage(sourceImage, points, searchImage);
                        // draw displacement vectors
                        BitmapData data = sourceImage.LockBits(
                            new Rectangle(0, 0, sourceImage.Width, sourceImage.Height),
                            ImageLockMode.ReadWrite, sourceImage.PixelFormat);
                        foreach (BlockMatch match in matches)
                        {
                            // highlight the original point in source image
                            Drawing.FillRectangle(data,
                                new Rectangle(match.SourcePoint.X - 1, match.SourcePoint.Y - 1, 3, 3),
                                Color.Yellow);
                            // draw line to the point in search image
                            Drawing.Line(data, match.SourcePoint, match.MatchPoint, Color.Red);
                            // check similarity
                           if (match.Similarity > 0.98f)
                            {
                                
                            }
                        }
                        sourceImage.UnlockBits(data);
                        CompView mov2 = this.WorkItem.SmartParts.AddNew<CompView>();
                        mov2.panAndZoomPictureBox1.Image = sourceImage;
                        SmartPartInfo spi2 =
                                 new SmartPartInfo("Results", "MyOwnDescription");                        
                        this.WorkItem.Workspaces[WorkspaceNames.TabWorkspace].Show(mov2, spi2);                       
                    }
                    catch
                    {         
                        MessageBox.Show("Images Should be of same height and width");
                        return;
                    }
               }              
            }
        }       

        }
    
    }

